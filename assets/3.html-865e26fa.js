const e=JSON.parse('{"key":"v-67431a92","path":"/zh/posts/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/3.html","title":"设计模式","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2022-01-03T00:00:00.000Z","category":["设计模式"],"tag":["设计模式"],"description":"设计模式 常用的设计模式包括以下几种： 创建型模式：主要用于创建对象，其代表包括工厂模式、单例模式、建造者模式和原型模式等。 结构型模式：主要用于处理对象之间的关系，其代表包括适配器模式、代理模式、装饰器模式、外观模式、桥接模式、组合模式和享元模式等。 行为型模式：主要用于管理对象和类之间的算法、定义、和/或职责，并且保证它们根据需求合作。其代表包括观察者模式、状态模式、策略模式、命令模式、解释器模式、调停者模式、备忘录模式、访问者模式和迭代器模式等。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/deep-blog/zh/posts/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/3.html"}],["meta",{"property":"og:site_name","content":"Deep Note"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式 常用的设计模式包括以下几种： 创建型模式：主要用于创建对象，其代表包括工厂模式、单例模式、建造者模式和原型模式等。 结构型模式：主要用于处理对象之间的关系，其代表包括适配器模式、代理模式、装饰器模式、外观模式、桥接模式、组合模式和享元模式等。 行为型模式：主要用于管理对象和类之间的算法、定义、和/或职责，并且保证它们根据需求合作。其代表包括观察者模式、状态模式、策略模式、命令模式、解释器模式、调停者模式、备忘录模式、访问者模式和迭代器模式等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2022-01-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"设计模式基本要素","slug":"设计模式基本要素","link":"#设计模式基本要素","children":[{"level":3,"title":"常见的设计模式","slug":"常见的设计模式","link":"#常见的设计模式","children":[]},{"level":3,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":3,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":3,"title":"建造者模式","slug":"建造者模式","link":"#建造者模式","children":[]},{"level":3,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]},{"level":3,"title":"桥接模式","slug":"桥接模式","link":"#桥接模式","children":[]},{"level":3,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]},{"level":3,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[]},{"level":3,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[]},{"level":3,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":3,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]},{"level":3,"title":"类之间的关系及uml语法","slug":"类之间的关系及uml语法","link":"#类之间的关系及uml语法","children":[]}]}],"git":{},"readingTime":{"minutes":13.25,"words":3976},"filePathRelative":"zh/posts/软件设计/3.md","localizedDate":"2022年1月3日","excerpt":"<h1> 设计模式</h1>\\n<p>常用的设计模式包括以下几种：</p>\\n<ol>\\n<li>\\n<p>创建型模式：主要用于创建对象，其代表包括工厂模式、单例模式、建造者模式和原型模式等。</p>\\n</li>\\n<li>\\n<p>结构型模式：主要用于处理对象之间的关系，其代表包括适配器模式、代理模式、装饰器模式、外观模式、桥接模式、组合模式和享元模式等。</p>\\n</li>\\n<li>\\n<p>行为型模式：主要用于管理对象和类之间的算法、定义、和/或职责，并且保证它们根据需求合作。其代表包括观察者模式、状态模式、策略模式、命令模式、解释器模式、调停者模式、备忘录模式、访问者模式和迭代器模式等。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
